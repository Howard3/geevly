package studenttempl 

import (
	"geevly/internal/webapi/templates/components"
	"geevly/internal/student"
	"fmt"
)

templ StudentList(students *student.ListStudentsResponse, pagination components.Pagination, searchQuery string) {
	<div id="student-list-container">
		<div class="flex items-center justify-between p-4 border-b bg-gray-100">
			<h1 class="text-lg font-medium">
				Students
				<span class="pl-3">
					@components.PrimaryButton("Add Student", templ.Attributes{"hx-get": "/admin/student/create"})
				</span>
			</h1>
			<div class="flex items-center gap-4">
				<form class="flex items-center gap-2" hx-get="/admin/student" hx-swap="outerHTML" hx-target="#student-list-container">
					<div class="flex gap-2">
						<input
							type="search"
							name="search"
							placeholder="Search by name..."
							class="px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
							value={ searchQuery }
						/>
						<button 
							type="submit"
							class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							Search
						</button>
						if searchQuery != "" {
							<a 
								href="/admin/student"
								class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500"
								hx-get="/admin/student"
								hx-swap="outerHTML"
								hx-target="#student-list-container"
							>
								Clear
							</a>
						}
					</div>
				</form>
			</div>
		</div>
		<div class="flex flex-col gap-2">
			<div class="relative w-full overflow-auto">
				<table class="w-full caption-bottom text-sm">
					<thead class="[&_tr]:border-b bg-gray-50">
						<tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
							<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 text-sm">
								Name
							</th>
							<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 text-sm">
							    Age	
							</th>
							<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 text-sm">
							    Grade Level	
							</th>
							<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 text-sm">
							    Student ID	
							</th>
							<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 text-sm">
								Active 
							</th>
							<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 text-sm">
								Actions 
							</th>
						</tr>
					</thead>
					<tbody class="[&_tr:last-child]:border-0">
						for _, student := range students.Students {
							<tr class="border-b transition-colors even:bg-gray-50/50 hover:bg-gray-100 data-[state=selected]:bg-muted rounded-lg font-medium">
								<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-sm">
									{ student.LastName }, { student.FirstName }
								</td>
								<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-sm">
									{ fmt.Sprintf("%d", student.Age) }
								</td>
								<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-sm">
									{ fmt.Sprintf("%d", student.Grade) }
								</td>
								<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-sm">
									{ student.StudentID }
								</td>
								<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-sm">
									if student.Active {
										<span class="text-green-500">Active</span>
									} else {
										<span class="text-red-500">Inactive</span>
									}
								</td>
								<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-sm">
									@components.PrimaryButton("View", templ.Attributes{"hx-get": fmt.Sprintf("/admin/student/%v", student.ID)})
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
		<div class="flex w-full items-center justify-between p-4 border-t">
			@components.ItemCounter(pagination)
		</div>
	</div>
}
