package usertempl 

import (
	"fmt"
	"geevly/internal/webapi/templates/components"
)

type School struct {
	ID string
	Name string
}

// ViewParams is the parameters for the view template
type ViewParams struct {
	ID        string
	FirstName string
	LastName  string
	Active    bool
	Username  string
	IsAdmin   bool
	Schools           []School
	FeederEnrollments []string
}

func (p *ViewParams) IsFeederEnrolled(schoolID string) bool {
	for _, enrolled := range p.FeederEnrollments {
		if enrolled == schoolID {
			return true
		}
	}
	return false
}

templ View(params ViewParams) {
	<div class="grid gap-6 md:grid-cols-2 m-3">
		<div class="flex-col flex gap-3">
			<div class="flex justify-between items-center mb-4">
				<h2 class="text-2xl font-bold">User Details</h2>
				@components.SecondaryButton("Return to User List", templ.Attributes{"hx-get": "/admin/user"})
			</div>
			<form hx-post={ fmt.Sprintf("/admin/user/%s", params.ID) } hx-push-url="false">
				<div class="space-y-4">
					<div class="rounded-lg border bg-card text-card-foreground shadow-sm w-full max-w-md mx-auto p-6" data-v0-t="card">
						@components.TextField("First Name", "first_name", "Enter first name", params.FirstName)
						@components.TextField("Last Name", "last_name", "Enter last name", params.LastName)
						@components.TextField("Username", "username", "Enter username", params.Username)
						<div class="p-3 flex flex-row w-full">
							<div class="flex items-center w-1/2 gap-3" hx-params="none">
								if params.Active {
									<span class="text-sm font-medium text-green-500">Active</span>
								} else {
									<span class="text-sm font-medium text-red-500">Inactive</span>
								}
								<a
									hx-put={ fmt.Sprintf("/admin/user/%s/setRole?role=active&value=%t", params.ID, !params.Active) }
									hx-confirm="Are you sure you want to toggle the status of this user?"
									class="pl-3 cursor-pointer inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 rounded-md px-3"
								>Toggle status</a>
							</div>
							<div class="text-right w-1/2">
								@components.SubmitButton("Update")
							</div>
						</div>
					</div>
				</div>
			</form>
			<form>
				<div class="rounded-lg border bg-card text-card-foreground shadow-sm w-full max-w-md mx-auto" data-v0-t="card">
					<div class="flex flex-col space-y-1.5 p-6 pb-0">
						<h3 class="text-2xl font-semibold whitespace-nowrap leading-none tracking-tight">
							Manage Roles
						</h3>
						<p class="text-sm text-muted-foreground">
							Attach or remove roles to this user.
						</p>
					</div>
					<div class="p-6 space-y-4">
						<div class="flex items-center space-x-4">
							<div class="flex-1">
								<h3 class="text-sm font-medium leading-none">
									System Admin
								</h3>
							</div>
							if params.IsAdmin {
								@components.PrimaryButton("Disable Super Admin", templ.Attributes{
									"hx-confirm": "Are you sure you want to disable Super Admin for this user?",
									"hx-put": fmt.Sprintf("/admin/user/%s/setRole?role=system_admin&value=false", params.ID),
								})
							} else {
								@components.PrimaryButton("Enable Super Admin", templ.Attributes{
									"hx-confirm": "Are you sure you want to enable Super Admin for this user?",
									"hx-put": fmt.Sprintf("/admin/user/%s/setRole?role=system_admin&value=true", params.ID),
								})
							}
						</div>
						<div class="flex-col items-center space-x-4">
							for i, school := range params.Schools {
								<div class={ "flex items-center justify-between p-4 space-x-4", templ.KV("bg-gray-100", i%2 == 0) }>
									<h3 class="text-sm font-medium">
										{ school.Name }
									</h3>
									if params.IsFeederEnrolled(school.ID) {
										@components.PrimaryButton("Feeder Unenroll", templ.Attributes{
											"hx-confirm": fmt.Sprintf("Are you sure you want to unenroll this user as a feeder in %s?", school.Name),
											"hx-put": fmt.Sprintf("/admin/user/%s/school/%s/feederEnrollment?enroll=false", params.ID, school.ID),
										})
									} else {
										@components.PrimaryButton("Feeder Enroll", templ.Attributes{
											"hx-confirm": fmt.Sprintf("Are you sure you want to enroll this user as a feeder in %s?", school.Name),
											"hx-put": fmt.Sprintf("/admin/user/%s/school/%s/feederEnrollment?enroll=true", params.ID, school.ID),
										})
									}
								</div>
							}
						</div>
					</div>
				</div>
			</form>
		</div>
	</div>
}
