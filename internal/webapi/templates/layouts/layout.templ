package layouts 

import (
	"os"
)

func getClerkPublishableKey() string {
	clerkPublishableKey := os.Getenv("CLERK_PUBLISHABLE_KEY")
	return clerkPublishableKey
}

templ FullLayout(main templ.Component, params Params) {
	<!DOCTYPE html>
	<html>
		<head>
			<title>Infinit Feeding</title>
			<link rel="stylesheet" href="/static/output.css"/>
			<link rel="stylesheet" href="/static/tom-select.css"/>
			<script type="module" src="/static/htmx.min.js"></script>
			<script type="module" src="/static/tom-select.complete.min.js"></script>
            <script src="/static/jslib-html5-camera-photo.min.js"></script>
			<script src="/static/d3.v7.min.js"></script>
			<script src="/static/cal-heatmap.min.js"></script>
            <script src="/static/html5-qrcode.min.js"></script>
            <link rel="stylesheet" href="/static/cal-heatmap.css"/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			@templ.JSONScript("params", params.export())
			// TODO: embed clerk in the project, don't load from CDN
			<script src="https://cdn.jsdelivr.net/npm/clerk-js@2.16.0/dist/clerk.browser.min.js"></script>
			// load clerk
            <script
              async
              crossorigin="anonymous"
              data-clerk-publishable-key={ getClerkPublishableKey() }
              src="https://subtle-stingray-12.clerk.accounts.dev/npm/@clerk/clerk-js@latest/dist/clerk.browser.js"
              type="text/javascript"
            ></script>
            <script>
				function readParamsValue(key) {
					const element = document.getElementById('params');
					const params = JSON.parse(element.textContent);
					return params[key];
				}

                window.addEventListener('load', async function () {
                    await Clerk.load()
					if (readParamsValue('IsSignedIn')) {
						Clerk.mountUserButton(document.getElementById('user-button'));
					}
                })
            </script>
            <script>
                // refresh tokens every 45 seconds
                (() => {
                    let token = null;
                    refresh = async function(){
                        if (!Clerk || !Clerk.session) {
                            return
                        }
                        token = await Clerk.session.getToken()
                    }
                    setInterval(this.refresh, 45_000)
                })()
            </script>
		</head>
		<body>
			<div class="flex flex-col min-h-screen bg-gray-100">
				@header(params)
				<div class="flex flex-col w-full rounded-lg shadow mx-auto container mt-3 bg-white mb-3 border-gray-300 border-2">
					<div id="content" hx-target="#content" hx-swap="innerHTML" hx-push-url="true">
						@main
					</div>
				</div>
			</div>
		</body>
	</html>
}

templ HTMXLayout(main templ.Component, params Params) {
	@main
}

templ header(params Params) {
	<header class="border-b bg-white shadow" hx-target="#content" hx-swap="innerHTML" hx-push-url="true">
		<div class="flex items-center h-14 px-4 border-b gap-4">
			<a class="text-lg font-semibold cursor-pointer hover:text-gray-800" hx-get="/">
				<img src="/static/img/infinity.svg" class="h-6 inline-block"/> Feeding
			</a>
			<nav class="flex-1 flex justify-between items-center">
				<div class="flex space-x-4">
					if (params.IsAdmin) {
						<a class="flex h-8 items-center justify-center rounded-md hover:underline cursor-pointer" hx-get="/admin">
							Admin
						</a>
					}
					if (params.IsFeeder) {
						<a class="flex h-8 items-center justify-center rounded-md hover:underline cursor-pointer" hx-get="/staff">
							Staff
						</a>
					}
					<a class="flex h-8 items-center justify-center rounded-md hover:underline cursor-pointer" hx-get="/feeding">
						Feeding
					</a>
					<a class="flex h-8 items-center justify-center rounded-md hover:underline cursor-pointer text-nowrap" hx-get="/how-it-works">
						How it works 
					</a>
					<a class="flex h-8 items-center justify-center rounded-md hover:underline cursor-pointer" hx-get="/about">
						About Us
					</a>
				</div>
				if (params.IsSignedIn) {
					<div class="flex-shrink-0" id="user-button"></div>
				} else {
					<a class="flex h-8 items-center justify-center rounded-md hover:underline cursor-pointer" hx-get="/sign-in">
						Sign In
					</a>
				}
			</nav>
		</div>
	</header>
}
