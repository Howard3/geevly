package templates

import (
    "geevly/gen/go/eda"
    "fmt"
	"github.com/Howard3/gosignal"
    "geevly/internal/student"
)

templ AdminViewStudent(id string, student *eda.Student, ver uint64) {
  <div class="grid gap-6 md:grid-cols-2 m-3">
    <div class="space-y-4">
        <form>
          // Embed Personal Info Section
          @StudentPersonalInfoSection(student, ver)
    
          // Embed Action Buttons Section
          @actionButtonsSection(id, student.Status, ver)
        </form>

      // Embed School Enrollment Section
      @schoolEnrollmentSection()
    </div>

    // Embed History Section
    <div hx-push-url="false" hx-trigger="load" hx-get={fmt.Sprintf("/admin/student/%s/history", id)} hx-target="this">
        Loading...
    </div>
  </div>
}

func toggleStatusURL(id string, ver uint64, status eda.Student_Status) (string) {
  active := status == eda.Student_ACTIVE
  return fmt.Sprintf("/admin/student/%s/toggleStatus?ver=%d&active=%s", id, ver, fmt.Sprintf("%t", !active))
}


templ StudentPersonalInfoSection(student *eda.Student, ver uint64) {
  <div class="space-y-4" id="personal-info">
      @textField("First Name", "first_name", "Enter the first name", student.FirstName)
      @textField("Last Name", "last_name", "Enter the last name", student.LastName)
      @dateField("Date of Birth", "date_of_birth", fmt.Sprintf("%d-%02d-%02d", student.DateOfBirth.Year, student.DateOfBirth.Month, student.DateOfBirth.Day))
      @hiddenField("version", fmt.Sprintf("%d", ver))
  </div>
}

templ actionButtonsSection(id string, status eda.Student_Status, ver uint64) {
  <div class="flex items-center justify-between mt-4">
    <div class="flex items-center space-x-2" hx-params="none">
    if status == eda.Student_ACTIVE {
       <span class="text-sm font-medium text-green-500">Active</span> 
    } else {
        <span class="text-sm font-medium text-red-500">Inactive</span>
    }
      <a
      hx-put={toggleStatusURL(id, ver, status)} 
      class="cursor-pointer inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 rounded-md px-3">Toggle status</a>
      @hiddenField("version", fmt.Sprintf("%d", ver))
    </div>
    @primaryButton("Update", templ.Attributes{
        "hx-post": fmt.Sprintf("/admin/student/%s", id),
        })
  </div>
}

templ schoolEnrollmentSection() {
  <div class="grid gap-2">
    <label class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">School</label>
    <div class="grid gap-2">
      <button type="button" role="combobox" aria-controls="radix-:r17:" aria-expanded="false" aria-autocomplete="none" dir="ltr" data-state="closed" data-placeholder="" class="flex h-10 items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 w-full">
        <span class="rounded-md border appearance-none inline-block w-full py-2 pl-3 pr-10 text-base leading-none font-inherit">
          Choose a school
        </span>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 opacity-50" aria-hidden="true"><path d="m6 9 6 6 6-6"></path></svg>
      </button>
      <div class="grid items-center gap-2">
        <label class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70" for="enrollment-date">Enrollment Date</label>
        <input class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" id="enrollment-date" type="date"/>
      </div>
      <div class="grid gap-2">
        <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2">Enroll/Unenroll</button>
        <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2">Unenroll</button>
      </div>
    </div>
  </div>
}

templ StudentHistorySection(evts []gosignal.Event) {
  <div class="grid gap-2 pt-2">
    <div class="rounded-lg border bg-card text-card-foreground shadow-sm" data-v0-t="card">
      <div class="flex flex-col space-y-1.5 p-6">
        <h3 class="text-2xl font-semibold whitespace-nowrap leading-none tracking-tight">History</h3>
      </div>
      <div class="p-0">
        <div class="grid min-w-[400px] w-full divide-y">
        for _, evt := range evts {
          <div class="grid grid-cols-3 items-center p-3 bg-gray-100">
            <div class="text-sm text-gray-500">
            switch evt.Type {
            case student.EVENT_ADD_STUDENT:
                Student created 
            case student.EVENT_UPDATE_STUDENT:
                Student updated
            case student.EVENT_SET_STUDENT_STATUS:
                Student status changed
            }
            </div>
            <div class="text-sm text-gray-500 text-right">{evt.Timestamp.Format("2006-01-02")}</div>
          </div>
        }
        </div>
      </div>
    </div>
  </div>
}

