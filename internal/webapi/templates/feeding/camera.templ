package feedingtempl

templ QRCamera() {
    <div id="reader" width="600px"></div>
    @startQRCamera()
}

script startQRCamera() {
    function onScanSuccess(decodedText, decodedResult) {
      // handle the scanned code as you like, for example:
      window.location.href = "/feeding/code/" + decodedText;
      foundCode(decodedText);
    }
    
    function onScanFailure(error) {
      // handle scan failure, usually better to ignore and keep scanning.
    }
    
    let html5QrcodeScanner = new Html5QrcodeScanner(
      "reader",
      { fps: 10 },
      /* verbose= */ false);
    html5QrcodeScanner.render(onScanSuccess, onScanFailure);
}

script startPhotoCapture() {
        var startCamera = document.getElementById('start_camera');
        var mainCamera = document.getElementById('main_camera');
        var capturePhoto = document.getElementById('capture_photo');
        var video = document.getElementById('video');
        var canvas = document.getElementById('canvas');
        var photo = document.getElementById('photo');
        var snap = document.getElementById('snap');
        var reset = document.getElementById('reset');
        var uploadForm = document.getElementById('upload_form');
        var base64Photo = document.getElementById('base64_photo');


        video.setAttribute('autoplay', '');
        video.setAttribute('playsinline', ''); // Important for iOS to allow inline video playback without entering full-screen mode.
        video.play().catch(error => console.error('Error attempting to play video:', error));
        
    
        // Access the device camera and stream to video element
        navigator.mediaDevices.getUserMedia({
            video: { facingMode: "environment" } // 'environment' for rear camera, 'user' for front camera
        })
        .then(function(stream) {
            video.srcObject = stream;
            video.play().then(() => {
                // hide start camera button
                startCamera.style.display = 'none';
                mainCamera.style.display = 'block'; 
                setTimeout(() => {
                    capturePhoto.style.height = video.videoHeight + 'px';
                }, 1000)
            });
        })
        .catch(function(err) {
            console.log("An error occurred: " + err);
        });
    
        capturePhoto.addEventListener('click', function() {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            mainCamera.height = video.videoHeight;
            mainCamera.style.height = video.videoHeight + 'px';
            canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);

            // convert canvas to dataurl
            const data = canvas.toDataURL('image/jpeg');

            // convert dataurl to blob
            const blob = dataURLtoBlob(data);         

            // Use CompressorJS to compress the blob
            new Compressor(blob, {
                quality: 0.6,
                success(compressedBlob) {
                    // Convert the compressed Blob back to a DataURL
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const compressedDataURL = e.target.result;

                        const justBase64Data = compressedDataURL.split(',')[1];
                        base64Photo.value = justBase64Data;

                        photo.setAttribute('src', compressedDataURL);
                        photo.style.display = 'block';
                        uploadForm.style.display = 'block';
                        video.style.display = 'none';
                        snap.style.display = 'none';
                        reset.style.display = 'block';
                    };
                    reader.readAsDataURL(compressedBlob);
                },
                error(err) {
                    console.error('Compression failed:', err);
                }
            });


            video.srcObject.getVideoTracks().forEach(track => track.stop());
        });
    
        reset.addEventListener('click', function() {
            photo.style.display = 'none';
            uploadForm.style.display = 'none';
            video.style.display = 'block';
            snap.style.display = 'block';
            reset.style.display = 'none';
            navigator.mediaDevices.getUserMedia({
                video: { facingMode: "environment" } // 'environment' for rear camera, 'user' for front camera
            })
            .then(function(stream) {
                video.srcObject = stream;
                video.play().then(() => {
                    // hide start camera button
                    document.getElementById('start_camera').style.display = 'none';
                });
            })
        });

            // Convert DataURL to Blob
        function dataURLtoBlob(dataURL) {
            var arr = dataURL.split(',');
            var mime = arr[0].match(/:(.*?);/)[1];
            var bstr = atob(arr[1]);
            var n = bstr.length;
            var u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new Blob([u8arr], { type: mime });
        }
}

templ PhotoCamera(studentID, version string) {
    <div id="start_camera" class="py-12 w-full bg-white rounded-lg overflow-hidden shadow-lg" onclick={ startPhotoCapture() } >
        <h1 class="text-3xl text-center">Turn on the camera, click here.</h1>
        <img src="/static/img/camera.svg" alt="Capture Photo" class="w-24 h-24 mx-auto"/>
    </div>
    <canvas id="canvas" style="display:none;" class="w-full"></canvas>
    <img id="photo" src="" alt="Your Photo" style="display:none;" class="w-full"/>
    <form id="upload_form" style="display:none;">
        <input type="hidden" name="base64_photo" id="base64_photo" value=""/>
        <input type="hidden" name="student_id" value={ studentID }/>
        <input type="hidden" name="version" value={ version }/>
        <div class="flex flex-row mt-12" hx-push-url="false">
            <img src="/static/img/back.svg" alt="back" class="w-24 h-24 mx-auto" id="reset"/>
            <img src="/static/img/check.svg" hx-post="/feeding/proof" alt="upload" class="w-24 h-24 mx-auto"/>
        </div>
    </form>
    <div id="main_camera" class="flex flex-col items-center justify-center hidden">
        <video id="video" class="w-full absolute" autoplay></video>
        <div class="px-6 py-4 my-12 absolute z-50 w-full inline-block align-middle" id="capture_photo">
            <img src="/static/img/camera.svg" alt="Capture Photo" class="w-24 h-24 mx-auto bg-white/25 p-4 rounded" id="snap"/>
      </div>
    </div>
}
